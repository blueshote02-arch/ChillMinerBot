# bot.py

import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# database.py ‡§∏‡•á ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ‡§á‡§Ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from database import get_user_data, can_mine, perform_mine, get_time_left, MINE_REWARD

# .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§≤‡•ã‡§ï‡§≤ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è)
load_dotenv()

# --- ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'/start' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    user_id = update.effective_user.id
    user = await get_user_data(user_id) # Firebase ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§≤‡§æ‡§ì
    
    if user is None:
        await update.message.reply_text("‚ùå ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§")
        return

    welcome_message = (
        "üî• **ChillMiner Bot ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!**\n\n"
        "‡§Ü‡§™‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® $CHILL ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏: **{:.2f}**\n\n"
        "‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:\n"
        "‚û°Ô∏è `/mine` - ‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ({} $CHILL)\n"
        "‚û°Ô∏è `/balance` - ‡§Ö‡§™‡§®‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§"
    ).format(user['balance'], MINE_REWARD)
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown')


async def mine_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'/mine' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    user_id = update.effective_user.id
    user = await get_user_data(user_id)
    if user is None: return

    # ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§Æ‡§æ‡§á‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
    can, time_since_last_mine = await can_mine(user_id)
    
    if can:
        # ‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§ï‡§∞‡•á‡§Ç, Firebase ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        reward, new_balance = await perform_mine(user_id, user['balance'])
        
        success_message = (
            "‚õèÔ∏è **‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§∏‡§´‡§≤!**\n\n"
            "‡§Ü‡§™‡§®‡•á ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï **{:.2f} $CHILL** ‡§Æ‡§æ‡§á‡§® ‡§ï‡§ø‡§è ‡§π‡•à‡§Ç‡•§\n"
            "‡§®‡§Ø‡§æ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏: **{:.2f} $CHILL**\n\n"
            "‡§Ö‡§ó‡§≤‡•Ä ‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó: 8 ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§æ‡§¶‡•§"
        ).format(reward, new_balance)
        
        await update.message.reply_text(success_message, parse_mode='Markdown')
        
    else:
        # ‡§Ø‡§¶‡§ø ‡§Æ‡§æ‡§á‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á, ‡§§‡•ã ‡§¨‡§ö‡§æ ‡§π‡•Å‡§Ü ‡§∏‡§Æ‡§Ø ‡§¨‡§§‡§æ‡§è‡§Ç
        time_left_str = get_time_left(time_since_last_mine)
        
        wait_message = (
            "üõë **‡§Ö‡§≠‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§ú‡§≤‡•ç‡§¶‡•Ä ‡§π‡•à!**\n\n"
            "‡§Ü‡§™ ‡§π‡§∞ 8 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§Æ‡§æ‡§á‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§\n"
            "‡§Ö‡§ó‡§≤‡•Ä ‡§Æ‡§æ‡§á‡§®‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§ö‡§æ ‡§π‡•Å‡§Ü ‡§∏‡§Æ‡§Ø:\n"
            "‚è≥ **{}**"
        ).format(time_left_str)
        
        await update.message.reply_text(wait_message, parse_mode='Markdown')


async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """'/balance' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    user_id = update.effective_user.id
    user = await get_user_data(user_id) # Firebase ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§≤‡§æ‡§ì
    if user is None: return

    balance_message = (
        "üí∞ **$CHILL ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏**\n\n"
        "‡§Ü‡§™‡§ï‡§æ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® $CHILL ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§π‡•à: **{:.2f}**"
    ).format(user['balance'])
    
    await update.message.reply_text(balance_message, parse_mode='Markdown')


# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ---

def main():
    """‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§"""
    # Render Env Var ‡§Ø‡§æ .env ‡§∏‡•á ‡§ü‡•ã‡§ï‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("ERROR: BOT_TOKEN Environment Variable ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
        return

    application = ApplicationBuilder().token(token).build()

    # ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("mine", mine_command))
    application.add_handler(CommandHandler("balance", balance_command))
    
    # ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§™‡•ã‡§≤‡§ø‡§Ç‡§ó (polling) ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§® ‡§ï‡§∞‡•á‡§Ç
    print("ChillMiner Bot (Production Mode) ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
    application.run_polling()

if __name__ == '__main__':
main()
